{"ast":null,"code":"import * as i1 from '@angular/common/http';\nimport { HttpClientModule, HttpRequest, HttpEventType } from '@angular/common/http';\nimport * as i0 from '@angular/core';\nimport { NgModule, Injectable, Inject } from '@angular/core';\nimport { BehaviorSubject, Subscription, Observable } from 'rxjs';\nimport { throttleTime, filter, takeLast, tap, map, finalize, concatMap } from 'rxjs/operators';\nvar Units;\n\n(function (Units) {\n  Units[\"kb/s\"] = \"kb/s\";\n  Units[\"mb/s\"] = \"mb/s\";\n  Units[\"gb/s\"] = \"gb/s\";\n  Units[\"tb/s\"] = \"tb/s\";\n})(Units || (Units = {}));\n\nconst NGX_NETWORK_CONFIG = 'NGX_NETWORK_CONFIG';\n\nclass NgxNetworkModule {\n  static forRoot(config) {\n    return {\n      ngModule: NgxNetworkModule,\n      providers: [NgxNetworkService, {\n        provide: NGX_NETWORK_CONFIG,\n        useValue: {\n          url: (config === null || config === void 0 ? void 0 : config.url) || `https://raw.githubusercontent.com/mahmoudshahin1111/ngx-network/master/src/assets/mocks/1mb.jpg`,\n          speedUnit: (config === null || config === void 0 ? void 0 : config.speedUnit) || Units['mb/s'],\n          delay: (config === null || config === void 0 ? void 0 : config.delay) || 100\n        }\n      }]\n    };\n  }\n\n}\n\nNgxNetworkModule.ɵfac = function NgxNetworkModule_Factory(t) {\n  return new (t || NgxNetworkModule)();\n};\n\nNgxNetworkModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: NgxNetworkModule\n});\nNgxNetworkModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[HttpClientModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxNetworkModule, [{\n    type: NgModule,\n    args: [{\n      imports: [HttpClientModule]\n    }]\n  }], null, null);\n})();\n\nclass NgxNetworkService {\n  constructor(config, http) {\n    this.config = config;\n    this.http = http;\n    this.speedChanged$ = new BehaviorSubject({\n      speed: 0,\n      unit: config.speedUnit\n    });\n    this.onSpeedChanged$ = this.speedChanged$.asObservable().pipe(throttleTime(this.config.delay), filter(payload => payload.speed !== 0));\n    this.startSendingPayloadSubscription = new Subscription();\n    this.lastPayloadSize = 0;\n    this.lastTime = 0;\n  }\n\n  getSpeed() {\n    if (this.startSendingPayloadSubscription) {\n      this.startSendingPayloadSubscription.unsubscribe();\n    }\n\n    this.startSendingPayloadSubscription = this.startSendingPayload(this.config.url, false).subscribe();\n    return this.onSpeedChanged$;\n  }\n\n  onSpeedChanged() {\n    if (this.startSendingPayloadSubscription) {\n      this.startSendingPayloadSubscription.unsubscribe();\n    }\n\n    this.startSendingPayloadSubscription = this.startSendingPayload(this.config.url, true).subscribe();\n    return this.onSpeedChanged$;\n  }\n\n  startSendingPayload(url, repeatRequest) {\n    this.lastTime = 0;\n    this.lastPayloadSize = 0;\n    const randomQuery = `q=${Math.round(Math.random() * 99959).toString()}`;\n\n    if (!repeatRequest) {\n      return this.sendRequest(url, randomQuery).pipe(takeLast(1), tap(payload => {\n        this.speedChanged$.next(payload);\n      }), map(e => null));\n    }\n\n    return this.sendRequest(url, randomQuery).pipe(tap(payload => {\n      this.speedChanged$.next(payload);\n    }), finalize(() => {\n      if (!repeatRequest) return;\n      this.startSendingPayloadSubscription.unsubscribe();\n      this.startSendingPayloadSubscription = this.startSendingPayload(url, repeatRequest).subscribe();\n    }), map(e => null));\n  }\n\n  sendRequest(url, params) {\n    const request = new HttpRequest('GET', url, {\n      params,\n      responseType: 'arraybuffer',\n      reportProgress: true\n    });\n    return this.http.request(request).pipe(concatMap(httpEvent => this.handleHttpEvents(httpEvent)));\n  }\n\n  handleHttpEvents(e) {\n    return new Observable(subscriber => {\n      if (e.type === HttpEventType.DownloadProgress) {\n        let currentTime = Date.now();\n        const elapseTimeForEveryPayload = currentTime - this.lastTime;\n        const elapseTimeSecs = elapseTimeForEveryPayload / 1000;\n        let speed = this.speedChanged$.getValue().speed.toString();\n        const currentPayloadSize = e.loaded;\n        const downloadPayloadSize = Math.abs(currentPayloadSize - this.lastPayloadSize);\n\n        switch (this.config.speedUnit) {\n          case Units['kb/s']:\n            speed = Number(downloadPayloadSize / 1024 / elapseTimeSecs).toFixed(3);\n            break;\n\n          case Units['mb/s']:\n            speed = Number(downloadPayloadSize / Math.pow(1024, 2) / elapseTimeSecs).toFixed(3);\n            break;\n\n          case Units['gb/s']:\n            speed = Number(downloadPayloadSize / Math.pow(1024, 3) / elapseTimeSecs).toFixed(3);\n            break;\n\n          case Units['tb/s']:\n            speed = Number(downloadPayloadSize / Math.pow(1024, 4) / elapseTimeSecs).toFixed(3);\n            break;\n        }\n\n        this.lastPayloadSize = e.loaded;\n        this.lastTime = Date.now();\n        subscriber.next({\n          speed: Number(Number(speed) === 0 ? this.speedChanged$.getValue().speed : speed),\n          unit: this.config.speedUnit\n        });\n      }\n\n      subscriber.complete();\n    });\n  }\n\n}\n\nNgxNetworkService.ɵfac = function NgxNetworkService_Factory(t) {\n  return new (t || NgxNetworkService)(i0.ɵɵinject(NGX_NETWORK_CONFIG), i0.ɵɵinject(i1.HttpClient));\n};\n\nNgxNetworkService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: NgxNetworkService,\n  factory: NgxNetworkService.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxNetworkService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [NGX_NETWORK_CONFIG]\n      }]\n    }, {\n      type: i1.HttpClient\n    }];\n  }, null);\n})();\n/*\r\n * Public API Surface of ngx-network\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { NGX_NETWORK_CONFIG, NgxNetworkModule, NgxNetworkService, Units };","map":{"version":3,"sources":["C:/Users/11800124/OneDrive - PXL/Documenten/School/Stage/Eindwerk/proof-of-concepts/node_modules/ngx-network/fesm2015/ngx-network.js"],"names":["i1","HttpClientModule","HttpRequest","HttpEventType","i0","NgModule","Injectable","Inject","BehaviorSubject","Subscription","Observable","throttleTime","filter","takeLast","tap","map","finalize","concatMap","Units","NGX_NETWORK_CONFIG","NgxNetworkModule","forRoot","config","ngModule","providers","NgxNetworkService","provide","useValue","url","speedUnit","delay","ɵfac","ɵmod","ɵinj","type","args","imports","constructor","http","speedChanged$","speed","unit","onSpeedChanged$","asObservable","pipe","payload","startSendingPayloadSubscription","lastPayloadSize","lastTime","getSpeed","unsubscribe","startSendingPayload","subscribe","onSpeedChanged","repeatRequest","randomQuery","Math","round","random","toString","sendRequest","next","e","params","request","responseType","reportProgress","httpEvent","handleHttpEvents","subscriber","DownloadProgress","currentTime","Date","now","elapseTimeForEveryPayload","elapseTimeSecs","getValue","currentPayloadSize","loaded","downloadPayloadSize","abs","Number","toFixed","pow","complete","HttpClient","ɵprov","providedIn","undefined","decorators"],"mappings":"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","sourcesContent":["import * as i1 from '@angular/common/http';\nimport { HttpClientModule, HttpRequest, HttpEventType } from '@angular/common/http';\nimport * as i0 from '@angular/core';\nimport { NgModule, Injectable, Inject } from '@angular/core';\nimport { BehaviorSubject, Subscription, Observable } from 'rxjs';\nimport { throttleTime, filter, takeLast, tap, map, finalize, concatMap } from 'rxjs/operators';\n\nvar Units;\r\n(function (Units) {\r\n    Units[\"kb/s\"] = \"kb/s\";\r\n    Units[\"mb/s\"] = \"mb/s\";\r\n    Units[\"gb/s\"] = \"gb/s\";\r\n    Units[\"tb/s\"] = \"tb/s\";\r\n})(Units || (Units = {}));\n\nconst NGX_NETWORK_CONFIG = 'NGX_NETWORK_CONFIG';\r\nclass NgxNetworkModule {\r\n    static forRoot(config) {\r\n        return {\r\n            ngModule: NgxNetworkModule,\r\n            providers: [\r\n                NgxNetworkService,\r\n                {\r\n                    provide: NGX_NETWORK_CONFIG,\r\n                    useValue: {\r\n                        url: (config === null || config === void 0 ? void 0 : config.url) || `https://raw.githubusercontent.com/mahmoudshahin1111/ngx-network/master/src/assets/mocks/1mb.jpg`,\r\n                        speedUnit: (config === null || config === void 0 ? void 0 : config.speedUnit) || Units['mb/s'],\r\n                        delay: (config === null || config === void 0 ? void 0 : config.delay) || 100\r\n                    }\r\n                }\r\n            ],\r\n        };\r\n    }\r\n}\r\nNgxNetworkModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.5\", ngImport: i0, type: NgxNetworkModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\r\nNgxNetworkModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.1.5\", ngImport: i0, type: NgxNetworkModule, imports: [HttpClientModule] });\r\nNgxNetworkModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.1.5\", ngImport: i0, type: NgxNetworkModule, imports: [[HttpClientModule]] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.5\", ngImport: i0, type: NgxNetworkModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    imports: [HttpClientModule],\r\n                }]\r\n        }] });\n\nclass NgxNetworkService {\r\n    constructor(config, http) {\r\n        this.config = config;\r\n        this.http = http;\r\n        this.speedChanged$ = new BehaviorSubject({\r\n            speed: 0,\r\n            unit: config.speedUnit,\r\n        });\r\n        this.onSpeedChanged$ = this.speedChanged$.asObservable().pipe(throttleTime(this.config.delay), filter((payload) => payload.speed !== 0));\r\n        this.startSendingPayloadSubscription = new Subscription();\r\n        this.lastPayloadSize = 0;\r\n        this.lastTime = 0;\r\n    }\r\n    getSpeed() {\r\n        if (this.startSendingPayloadSubscription) {\r\n            this.startSendingPayloadSubscription.unsubscribe();\r\n        }\r\n        this.startSendingPayloadSubscription = this.startSendingPayload(this.config.url, false).subscribe();\r\n        return this.onSpeedChanged$;\r\n    }\r\n    onSpeedChanged() {\r\n        if (this.startSendingPayloadSubscription) {\r\n            this.startSendingPayloadSubscription.unsubscribe();\r\n        }\r\n        this.startSendingPayloadSubscription = this.startSendingPayload(this.config.url, true).subscribe();\r\n        return this.onSpeedChanged$;\r\n    }\r\n    startSendingPayload(url, repeatRequest) {\r\n        this.lastTime = 0;\r\n        this.lastPayloadSize = 0;\r\n        const randomQuery = `q=${Math.round(Math.random() * 99959).toString()}`;\r\n        if (!repeatRequest) {\r\n            return this.sendRequest(url, randomQuery).pipe(takeLast(1), tap((payload) => {\r\n                this.speedChanged$.next(payload);\r\n            }), map((e) => null));\r\n        }\r\n        return this.sendRequest(url, randomQuery).pipe(tap((payload) => {\r\n            this.speedChanged$.next(payload);\r\n        }), finalize(() => {\r\n            if (!repeatRequest)\r\n                return;\r\n            this.startSendingPayloadSubscription.unsubscribe();\r\n            this.startSendingPayloadSubscription = this.startSendingPayload(url, repeatRequest).subscribe();\r\n        }), map((e) => null));\r\n    }\r\n    sendRequest(url, params) {\r\n        const request = new HttpRequest('GET', url, {\r\n            params,\r\n            responseType: 'arraybuffer',\r\n            reportProgress: true,\r\n        });\r\n        return this.http\r\n            .request(request)\r\n            .pipe(concatMap((httpEvent) => this.handleHttpEvents(httpEvent)));\r\n    }\r\n    handleHttpEvents(e) {\r\n        return new Observable((subscriber) => {\r\n            if (e.type === HttpEventType.DownloadProgress) {\r\n                let currentTime = Date.now();\r\n                const elapseTimeForEveryPayload = currentTime - this.lastTime;\r\n                const elapseTimeSecs = elapseTimeForEveryPayload / 1000;\r\n                let speed = this.speedChanged$.getValue().speed.toString();\r\n                const currentPayloadSize = e.loaded;\r\n                const downloadPayloadSize = Math.abs(currentPayloadSize - this.lastPayloadSize);\r\n                switch (this.config.speedUnit) {\r\n                    case Units['kb/s']:\r\n                        speed = Number(downloadPayloadSize / 1024 / elapseTimeSecs).toFixed(3);\r\n                        break;\r\n                    case Units['mb/s']:\r\n                        speed = Number(downloadPayloadSize / Math.pow(1024, 2) / elapseTimeSecs).toFixed(3);\r\n                        break;\r\n                    case Units['gb/s']:\r\n                        speed = Number(downloadPayloadSize / Math.pow(1024, 3) / elapseTimeSecs).toFixed(3);\r\n                        break;\r\n                    case Units['tb/s']:\r\n                        speed = Number(downloadPayloadSize / Math.pow(1024, 4) / elapseTimeSecs).toFixed(3);\r\n                        break;\r\n                }\r\n                this.lastPayloadSize = e.loaded;\r\n                this.lastTime = Date.now();\r\n                subscriber.next({\r\n                    speed: Number(Number(speed) === 0 ? this.speedChanged$.getValue().speed : speed),\r\n                    unit: this.config.speedUnit,\r\n                });\r\n            }\r\n            subscriber.complete();\r\n        });\r\n    }\r\n}\r\nNgxNetworkService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.5\", ngImport: i0, type: NgxNetworkService, deps: [{ token: NGX_NETWORK_CONFIG }, { token: i1.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable });\r\nNgxNetworkService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.1.5\", ngImport: i0, type: NgxNetworkService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.5\", ngImport: i0, type: NgxNetworkService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\r\n                    type: Inject,\r\n                    args: [NGX_NETWORK_CONFIG]\r\n                }] }, { type: i1.HttpClient }]; } });\n\n/*\r\n * Public API Surface of ngx-network\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { NGX_NETWORK_CONFIG, NgxNetworkModule, NgxNetworkService, Units };\n"]},"metadata":{},"sourceType":"module"}